-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2022-12-29 14:44:40 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE adrese (
    cod_adresa    NUMBER(4) NOT NULL,
    strada        VARCHAR2(40) NOT NULL,
    oras          VARCHAR2(30) NOT NULL,
    judet         VARCHAR2(30) NOT NULL,
    tara          VARCHAR2(30) NOT NULL,
    cod_postal    VARCHAR2(10) NOT NULL,
    numar_telefon VARCHAR2(20) NOT NULL
)
LOGGING;

ALTER TABLE adrese ADD CONSTRAINT adrese_cod_adresa_ck CHECK ( cod_adresa > 0 );

ALTER TABLE adrese
    ADD CONSTRAINT adrese_strada_ck CHECK ( REGEXP_LIKE ( strada,
                                                          '^[A-Za-z0-9/./,]+((\s)?([A-Za-z0-9/./,])+)*$' ) );

ALTER TABLE adrese
    ADD CONSTRAINT adrese_oras_ck CHECK ( REGEXP_LIKE ( oras,
                                                        '^[A-Za-z]+((\s)?([A-Za-z])+)*$' ) );

ALTER TABLE adrese
    ADD CONSTRAINT adrese_judet_ck CHECK ( REGEXP_LIKE ( judet,
                                                         '^[A-Za-z]+((\s)?([A-Za-z])+)*$' ) );

ALTER TABLE adrese
    ADD CONSTRAINT adrese_tara_ck CHECK ( REGEXP_LIKE ( tara,
                                                        '^[A-Za-z]+((\s)?([A-Za-z])+)*$' ) );

ALTER TABLE adrese
    ADD CONSTRAINT adrese_cod_postal_ck CHECK ( REGEXP_LIKE ( cod_postal,
                                                              '^[0-9]+((\s)?([0-9])+)*$' ) );

ALTER TABLE adrese
    ADD CONSTRAINT adrese_numar_telefon_ck CHECK ( REGEXP_LIKE ( numar_telefon,
                                                                 '^[0-9]+((\s)?([0-9])+)*$' ) );

ALTER TABLE adrese ADD CONSTRAINT adrese_pk PRIMARY KEY ( cod_adresa );

ALTER TABLE adrese ADD CONSTRAINT adrese_numar_telefon_un UNIQUE ( numar_telefon );

CREATE TABLE angajati (
    cod_angajat   NUMBER(3) NOT NULL,
    nume          VARCHAR2(20) NOT NULL,
    prenume       VARCHAR2(25) NOT NULL,
    data_nastere  DATE NOT NULL,
    numar_telefon VARCHAR2(20) NOT NULL,
    email         VARCHAR2(30),
    data_angajare DATE NOT NULL,
    salariu       NUMBER(8) NOT NULL,
    comision      NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE angajati ADD CONSTRAINT angajati_cod_angajat_ck CHECK ( cod_angajat > 0 );

ALTER TABLE angajati
    ADD CONSTRAINT angajati_nume_ck CHECK ( REGEXP_LIKE ( nume,
                                                          '^(([A-Za-z])+)*$' ) );

ALTER TABLE angajati
    ADD CONSTRAINT angajati_prenume_ck CHECK ( REGEXP_LIKE ( prenume,
                                                             '^[A-Za-z/-]+((\s)?([A-Za-z/-])+)*$' ) );

ALTER TABLE angajati
    ADD CONSTRAINT angajati_numar_telefon_ck CHECK ( REGEXP_LIKE ( numar_telefon,
                                                                   '^[0-9]+((\s)?([0-9])+)*$' ) );

ALTER TABLE angajati
    ADD CONSTRAINT angajati_email_ck CHECK ( REGEXP_LIKE ( email,
                                                           '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE angajati ADD CONSTRAINT angajati_salariu_ck CHECK ( salariu > 0 );

ALTER TABLE angajati ADD CONSTRAINT angajati_comision_ck CHECK ( comision > 0 );

ALTER TABLE angajati ADD CONSTRAINT angajati_pk PRIMARY KEY ( cod_angajat );

ALTER TABLE angajati ADD CONSTRAINT angajati_numar_telefon_un UNIQUE ( numar_telefon );

ALTER TABLE angajati ADD CONSTRAINT angajati_email_un UNIQUE ( email );

CREATE TABLE clienti (
    cod_client NUMBER(4) NOT NULL,
    nume       VARCHAR2(20) NOT NULL,
    prenume    VARCHAR2(25) NOT NULL,
    email      VARCHAR2(30) NOT NULL
)
LOGGING;

ALTER TABLE clienti ADD CONSTRAINT clienti_cod_client_ck CHECK ( cod_client > 0 );

ALTER TABLE clienti
    ADD CONSTRAINT clienti_nume_ck CHECK ( REGEXP_LIKE ( nume,
                                                         '^(([A-Za-z])+)*$' ) );

ALTER TABLE clienti
    ADD CONSTRAINT clienti_prenume_ck CHECK ( REGEXP_LIKE ( prenume,
                                                            '^[A-Za-z/-]+((\s)?([A-Za-z/-])+)*$' ) );

ALTER TABLE clienti
    ADD CONSTRAINT clienti_email_ck CHECK ( REGEXP_LIKE ( email,
                                                          '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE clienti ADD CONSTRAINT clienti_pk PRIMARY KEY ( cod_client );

ALTER TABLE clienti ADD CONSTRAINT clienti_email_un UNIQUE ( email );

CREATE TABLE comenzi (
    cod_comanda          NUMBER(4) NOT NULL,
    data_cumpararii      DATE NOT NULL,
    modalitate_de_plata  VARCHAR2(4) NOT NULL,
    clienti_cod_client   NUMBER(4) NOT NULL,
    angajati_cod_angajat NUMBER(3) NOT NULL,
    adrese_cod_adresa    NUMBER(4) NOT NULL
)
LOGGING;

ALTER TABLE comenzi ADD CONSTRAINT comenzii_cod_comanda_ck CHECK ( cod_comanda > 0 );

ALTER TABLE comenzi
    ADD CHECK ( modalitate_de_plata IN ( 'card', 'cash' ) );

ALTER TABLE comenzi ADD CONSTRAINT comenzi_pk PRIMARY KEY ( cod_comanda );

CREATE TABLE memorie_ram (
    cod_ram            NUMBER(2) DEFAULT 0 NOT NULL,
    nume               VARCHAR2(30) NOT NULL,
    tip_memorie        VARCHAR2(10) NOT NULL,
    capacitate_memorie NUMBER(2) NOT NULL,
    frecventa          NUMBER(5) NOT NULL,
    standard           VARCHAR2(20) NOT NULL,
    radiator           VARCHAR2(2) NOT NULL,
    pret               NUMBER(5) NOT NULL
)
LOGGING;

ALTER TABLE memorie_ram ADD CONSTRAINT memorie_ram_cod_ram_ck CHECK ( cod_ram > - 1 );

ALTER TABLE memorie_ram
    ADD CONSTRAINT memorie_ram_nume_ck CHECK ( REGEXP_LIKE ( nume,
                                                             '^[A-Za-z0-9]+((\s)?([A-Za-z0-9])+)*$' ) );

ALTER TABLE memorie_ram
    ADD CONSTRAINT memorie_ram_tip_memorie_ck CHECK ( REGEXP_LIKE ( tip_memorie,
                                                                    '^[A-Za-z0-9]+((\s)?([A-Za-z0-9])+)*$' ) );

ALTER TABLE memorie_ram ADD CONSTRAINT ram_capacitate_memorie_ck CHECK ( capacitate_memorie > - 1 );

ALTER TABLE memorie_ram ADD CONSTRAINT memorie_ram_frecventa_ck CHECK ( frecventa > - 1 );

ALTER TABLE memorie_ram
    ADD CONSTRAINT memorie_ram_standard_ck CHECK ( REGEXP_LIKE ( standard,
                                                                 '^[A-Za-z0-9]+((\s)?([A-Za-z0-9])+)*$' ) );

ALTER TABLE memorie_ram
    ADD CONSTRAINT memorie_ram_radiator_ck CHECK ( radiator IN ( 'Da', 'Nu' ) );

ALTER TABLE memorie_ram ADD CONSTRAINT memorie_ram_pret_ck CHECK ( pret > - 1 );

ALTER TABLE memorie_ram ADD CONSTRAINT memorie_ram_pk PRIMARY KEY ( cod_ram );

CREATE TABLE placa_video (
    cod_placa_video    NUMBER(2) DEFAULT 0 NOT NULL,
    nume               VARCHAR2(30) NOT NULL,
    tip_memorie        VARCHAR2(10) NOT NULL,
    capacitate_memorie NUMBER(2) NOT NULL,
    frecventa          NUMBER(5) NOT NULL,
    putere             NUMBER(3) NOT NULL,
    pret               NUMBER(5) NOT NULL
)
LOGGING;

ALTER TABLE placa_video ADD CONSTRAINT placa_video_cod_placa_video_ck CHECK ( cod_placa_video > - 1 );

ALTER TABLE placa_video
    ADD CONSTRAINT placa_video_nume_ck CHECK ( REGEXP_LIKE ( nume,
                                                             '^[A-Za-z0-9]+((\s)?([A-Za-z0-9])+)*$' ) );

ALTER TABLE placa_video
    ADD CONSTRAINT placa_video_tip_memorie_ck CHECK ( REGEXP_LIKE ( tip_memorie,
                                                                    '^[A-Za-z0-9]+((\s)?([A-Za-z0-9])+)*$' ) );

ALTER TABLE placa_video ADD CONSTRAINT placa_video_cap_memorie_ck CHECK ( capacitate_memorie > - 1 );

ALTER TABLE placa_video ADD CONSTRAINT placa_video_frecventa_ck CHECK ( frecventa > - 1 );

ALTER TABLE placa_video ADD CONSTRAINT placa_video_putere_ck CHECK ( putere > - 1 );

ALTER TABLE placa_video ADD CONSTRAINT placa_video_pret_ck CHECK ( pret > - 1 );

ALTER TABLE placa_video ADD CONSTRAINT placa_video_pk PRIMARY KEY ( cod_placa_video );

CREATE TABLE procesor (
    cod_procesor NUMBER(2) DEFAULT 0 NOT NULL,
    nume         VARCHAR2(30) NOT NULL,
    nuclee       NUMBER(2) NOT NULL,
    threaduri    NUMBER(2) NOT NULL,
    frecventa    NUMBER(3, 2) NOT NULL,
    putere       NUMBER(3) NOT NULL,
    pret         NUMBER(5) NOT NULL
)
LOGGING;

ALTER TABLE procesor ADD CONSTRAINT procesor_cod_procesor_ck CHECK ( cod_procesor > - 1 );

ALTER TABLE procesor
    ADD CONSTRAINT procesor_nume_ck CHECK ( REGEXP_LIKE ( nume,
                                                          '^[A-Za-z0-9]+((\s)?([A-Za-z0-9])+)*$' ) );

ALTER TABLE procesor ADD CONSTRAINT procesor_nuclee_ck CHECK ( nuclee > - 1 );

ALTER TABLE procesor ADD CONSTRAINT procesor_threaduri_ck CHECK ( threaduri > - 1 );

ALTER TABLE procesor ADD CONSTRAINT procesor_frecventa_ck CHECK ( frecventa > - 1 );

ALTER TABLE procesor ADD CONSTRAINT procesor_putere_ck CHECK ( putere > - 1 );

ALTER TABLE procesor ADD CONSTRAINT procesor_pret_ck CHECK ( pret > - 1 );

ALTER TABLE procesor ADD CONSTRAINT procesor_pk PRIMARY KEY ( cod_procesor );

CREATE TABLE produse (
    cod_produs                  NUMBER(4) NOT NULL,
    tip_produs                  VARCHAR2(20) NOT NULL,
    comenzi_cod_comanda         NUMBER(4) NOT NULL,
    procesor_cod_procesor       NUMBER(2) NOT NULL,
    placa_video_cod_placa_video NUMBER(2) NOT NULL,
    memorie_ram_cod_ram         NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE produse ADD CONSTRAINT produse_cod_produs_ck CHECK ( cod_produs > 0 );

ALTER TABLE produse
    ADD CHECK ( tip_produs IN ( 'Memorie ram', 'Placa video', 'Procesor', 'Mai multe' ) );

ALTER TABLE produse ADD CONSTRAINT produse_pk PRIMARY KEY ( cod_produs );

ALTER TABLE comenzi
    ADD CONSTRAINT comenzi_adrese_fk FOREIGN KEY ( adrese_cod_adresa )
        REFERENCES adrese ( cod_adresa )
    NOT DEFERRABLE;

ALTER TABLE comenzi
    ADD CONSTRAINT comenzi_angajati_fk FOREIGN KEY ( angajati_cod_angajat )
        REFERENCES angajati ( cod_angajat )
    NOT DEFERRABLE;

ALTER TABLE comenzi
    ADD CONSTRAINT comenzi_clienti_fk FOREIGN KEY ( clienti_cod_client )
        REFERENCES clienti ( cod_client )
    NOT DEFERRABLE;

ALTER TABLE produse
    ADD CONSTRAINT produse_comenzi_fk FOREIGN KEY ( comenzi_cod_comanda )
        REFERENCES comenzi ( cod_comanda )
    NOT DEFERRABLE;

ALTER TABLE produse
    ADD CONSTRAINT produse_memorie_ram_fk FOREIGN KEY ( memorie_ram_cod_ram )
        REFERENCES memorie_ram ( cod_ram )
    NOT DEFERRABLE;

ALTER TABLE produse
    ADD CONSTRAINT produse_placa_video_fk FOREIGN KEY ( placa_video_cod_placa_video )
        REFERENCES placa_video ( cod_placa_video )
    NOT DEFERRABLE;

ALTER TABLE produse
    ADD CONSTRAINT produse_procesor_fk FOREIGN KEY ( procesor_cod_procesor )
        REFERENCES procesor ( cod_procesor )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER trg_Angajati_data_angajare 
    BEFORE INSERT OR UPDATE ON Angajati 
    FOR EACH ROW 
DECLARE
    data_angajare DATE;
BEGIN
	IF(SYSDATE - :new.data_angajare < 0)
	THEN
		RAISE_APPLICATION_ERROR(-20001,
			'Data invalida: ' || TO_CHAR(data_angajare,'DD.MM.YYYY') ||('Data introdusa este din viitor !!'));
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER trg_Angajati_data_nastere 
    BEFORE INSERT OR UPDATE ON Angajati 
    FOR EACH ROW 
DECLARE
    data_nastere DATE;
BEGIN
	IF( SYSDATE - :new.data_nastere < 18*365 or SYSDATE - :new.data_nastere > 63*365)
	THEN
		RAISE_APPLICATION_ERROR(-20001,
			'Data invalida: ' || TO_CHAR(data_nastere,'DD.MM.YYYY') ||('Angajatul nu are varsta legala!!'));
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER trg_Comenzi_data_cumpararii 
    BEFORE INSERT OR UPDATE ON Comenzi 
    FOR EACH ROW 
DECLARE
    data_cumpararii DATE;
BEGIN
	IF(SYSDATE - :new.data_cumpararii < 0)
	THEN
		RAISE_APPLICATION_ERROR(-20001,
			'Data invalida: ' || TO_CHAR(data_cumpararii,'DD.MM.YYYY') ||('Data introdusa este din viitor !!'));
	END IF;
END; 
/

CREATE SEQUENCE adrese_cod_adresa_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER adrese_cod_adresa_trg BEFORE
    INSERT ON adrese
    FOR EACH ROW
    WHEN ( new.cod_adresa IS NULL )
BEGIN
    :new.cod_adresa := adrese_cod_adresa_seq.nextval;
END;
/

CREATE SEQUENCE angajati_cod_angajat_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER angajati_cod_angajat_trg BEFORE
    INSERT ON angajati
    FOR EACH ROW
    WHEN ( new.cod_angajat IS NULL )
BEGIN
    :new.cod_angajat := angajati_cod_angajat_seq.nextval;
END;
/

CREATE SEQUENCE clienti_cod_client_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER clienti_cod_client_trg BEFORE
    INSERT ON clienti
    FOR EACH ROW
    WHEN ( new.cod_client IS NULL )
BEGIN
    :new.cod_client := clienti_cod_client_seq.nextval;
END;
/

CREATE SEQUENCE comenzi_cod_comanda_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER comenzi_cod_comanda_trg BEFORE
    INSERT ON comenzi
    FOR EACH ROW
    WHEN ( new.cod_comanda IS NULL )
BEGIN
    :new.cod_comanda := comenzi_cod_comanda_seq.nextval;
END;
/

CREATE SEQUENCE memorie_ram_cod_ram_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER memorie_ram_cod_ram_trg BEFORE
    INSERT ON memorie_ram
    FOR EACH ROW
    WHEN ( new.cod_ram IS NULL )
BEGIN
    :new.cod_ram := memorie_ram_cod_ram_seq.nextval;
END;
/

CREATE SEQUENCE placa_video_cod_placa_video START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER placa_video_cod_placa_video BEFORE
    INSERT ON placa_video
    FOR EACH ROW
    WHEN ( new.cod_placa_video IS NULL )
BEGIN
    :new.cod_placa_video := placa_video_cod_placa_video.nextval;
END;
/

CREATE SEQUENCE procesor_cod_procesor_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER procesor_cod_procesor_trg BEFORE
    INSERT ON procesor
    FOR EACH ROW
    WHEN ( new.cod_procesor IS NULL )
BEGIN
    :new.cod_procesor := procesor_cod_procesor_seq.nextval;
END;
/

CREATE SEQUENCE produse_cod_produs_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER produse_cod_produs_trg BEFORE
    INSERT ON produse
    FOR EACH ROW
    WHEN ( new.cod_produs IS NULL )
BEGIN
    :new.cod_produs := produse_cod_produs_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             1
-- ALTER TABLE                             63
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          11
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          8
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
